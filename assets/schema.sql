CREATE TABLE "elements" (
	"@id" TEXT PRIMARY KEY UNIQUE,
	"@type" TEXT,
	"body" TEXT,
	"declaredName" TEXT,
	"declaredShortName" TEXT,
	"description" TEXT,
	"elementId" TEXT,
	"isAbstract" INTEGER,
	"isComposite" INTEGER,
	"isConjugated" INTEGER,
	"isConstant" INTEGER,
	"isDefault" INTEGER,
	"isDerived" INTEGER,
	"isEnd" INTEGER,
	"isImplied" INTEGER,
	"isImpliedIncluded" INTEGER,
	"isImportAll" INTEGER,
	"isIndividual" INTEGER,
	"isInitial" INTEGER,
	"isLibraryElement" INTEGER,
	"isModelLevelEvaluable" INTEGER,
	"isNegated" INTEGER,
	"isOrdered" INTEGER,
	"isParallel" INTEGER,
	"isPortion" INTEGER,
	"isRecursive" INTEGER,
	"isReference" INTEGER,
	"isStandard" INTEGER,
	"isSufficient" INTEGER,
	"isUnique" INTEGER,
	"isVariable" INTEGER,
	"isVariation" INTEGER,
	"language" TEXT,
	"locale" TEXT,
	"mayTimeVary" INTEGER,
	"memberElementId" TEXT,
	"memberName" TEXT,
	"memberShortName" TEXT,
	"name" TEXT,
	"operator" TEXT,
	"ownedMemberElementId" TEXT,
	"ownedMemberName" TEXT,
	"ownedMemberShortName" TEXT,
	"property" TEXT,
	"qualifiedName" TEXT,
	"reqId" TEXT,
	"shortName" TEXT,
	"specification" TEXT,
	"value" ANY
) STRICT;


CREATE TABLE "relations" (
    "name" TEXT NOT NULL CHECK("name" IN ('action',
		'actionDefinition',
		'actorParameter',
		'allocation',
		'allocationDefinition',
		'analysisCaseDefinition',
		'annotatedElement',
		'annotatingElement',
		'annotation',
		'argument',
		'assertedConstraint',
		'association',
		'associationEnd',
		'assumedConstraint',
		'attributeDefinition',
		'behavior',
		'bodyAction',
		'bound',
		'calculation',
		'calculationDefinition',
		'caseDefinition',
		'chainingFeature',
		'client',
		'concernDefinition',
		'condition',
		'conjugatedPortDefinition',
		'conjugatedType',
		'connectionDefinition',
		'connectionEnd',
		'connectorEnd',
		'constraintDefinition',
		'crossFeature',
		'crossedFeature',
		'crossingFeature',
		'defaultBranch',
		'defaultFeaturingType',
		'definition',
		'differencingType',
		'directedFeature',
		'directedUsage',
		'disjoiningType',
		'doAction',
		'documentation',
		'documentedElement',
		'effectAction',
		'elementEnd',
		'elseAction',
		'endFeature',
		'endOwningType',
		'entryAction',
		'enumeratedValue',
		'enumerationDefinition',
		'eventOccurrence',
		'exhibitedState',
		'exitAction',
		'exposedElement',
		'expression',
		'externalDataEnd',
		'feature',
		'featureChained',
		'featureInverted',
		'featureMembership',
		'featureOfType',
		'featureTarget',
		'featureWithValue',
		'featuringType',
		'filterCondition',
		'flowDefinition',
		'flowEnd',
		'framedConcern',
		'function',
		'general',
		'guardExpression',
		'head',
		'ifArgument',
		'importOwningNamespace',
		'importedElement',
		'importedMembership',
		'importedNamespace',
		'includedUseCase',
		'individualDefinition',
		'inheritedFeature',
		'inheritedMembership',
		'input',
		'instantiatedType',
		'interaction',
		'interfaceDefinition',
		'interfaceEnd',
		'intersectingType',
		'invertingFeature',
		'itemDefinition',
		'loopVariable',
		'lowerBound',
		'member',
		'memberElement',
		'membership',
		'membershipOwningNamespace',
		'metaclass',
		'metadataDefinition',
		'multiplicity',
		'nestedAction',
		'nestedAllocation',
		'nestedAnalysisCase',
		'nestedAttribute',
		'nestedCalculation',
		'nestedCase',
		'nestedConcern',
		'nestedConnection',
		'nestedConstraint',
		'nestedEnumeration',
		'nestedFlow',
		'nestedInterface',
		'nestedItem',
		'nestedMetadata',
		'nestedOccurrence',
		'nestedPart',
		'nestedPort',
		'nestedReference',
		'nestedRendering',
		'nestedRequirement',
		'nestedState',
		'nestedTransition',
		'nestedUsage',
		'nestedUseCase',
		'nestedVerificationCase',
		'nestedView',
		'nestedViewpoint',
		'objectiveRequirement',
		'occurrenceDefinition',
		'originalPortDefinition',
		'originalType',
		'output',
		'operand',
		'ownedAction',
		'ownedActorParameter',
		'ownedAllocation',
		'ownedAnalysisCase',
		'ownedAnnotatingElement',
		'ownedAnnotatingRelationship',
		'ownedAnnotation',
		'ownedAttribute',
		'ownedCalculation',
		'ownedCase',
		'ownedConcern',
		'ownedConjugator',
		'ownedConnection',
		'ownedConstraint',
		'ownedCrossSubsetting',
		'ownedDifferencing',
		'ownedDisjoining',
		'ownedElement',
		'ownedEndFeature',
		'ownedEnumeration',
		'ownedFeature',
		'ownedFeatureChaining',
		'ownedFeatureInverting',
		'ownedFeatureMembership',
		'ownedFlow',
		'ownedImport',
		'ownedInterface',
		'ownedIntersecting',
		'ownedItem',
		'ownedMember',
		'ownedMemberElement',
		'ownedMemberFeature',
		'ownedMemberParameter',
		'ownedMembership',
		'ownedMetadata',
		'ownedObjectiveRequirement',
		'ownedOccurrence',
		'ownedPart',
		'ownedPort',
		'ownedPortConjugator',
		'ownedRedefinition',
		'ownedReference',
		'ownedReferenceSubsetting',
		'ownedRelatedElement',
		'ownedRelationship',
		'ownedRendering',
		'ownedRequirement',
		'ownedResultExpression',
		'ownedSpecialization',
		'ownedStakeholderParameter',
		'ownedState',
		'ownedSubclassification',
		'ownedSubjectParameter',
		'ownedSubsetting',
		'ownedTransition',
		'ownedTypeFeaturing',
		'ownedTyping',
		'ownedUnioning',
		'ownedUsage',
		'ownedUseCase',
		'ownedVariantUsage',
		'ownedVerificationCase',
		'ownedView',
		'ownedViewpoint',
		'owner',
		'owningAnnotatedElement',
		'owningAnnotatingElement',
		'owningAnnotatingRelationship',
		'owningClassifier',
		'owningDefinition',
		'owningFeature',
		'owningFeatureMembership',
		'owningFeatureOfType',
		'owningMembership',
		'owningNamespace',
		'owningProject',
		'owningRelatedElement',
		'owningRelationship',
		'owningType',
		'owningUsage',
		'parameter',
		'partDefinition',
		'payloadArgument',
		'payloadFeature',
		'payloadParameter',
		'payloadType',
		'performedAction',
		'portDefinition',
		'predicate',
		'previousCommit',
		'receiverArgument',
		'redefinedFeature',
		'redefiningFeature',
		'referencedCommit',
		'referencedConcern',
		'referencedConstraint',
		'referencedElement',
		'referencedFeature',
		'referencedRendering',
		'referencingFeature',
		'referent',
		'relatedElement',
		'relatedFeature',
		'relatedType',
		'rendering',
		'renderingDefinition',
		'representedElement',
		'requiredConstraint',
		'requirementDefinition',
		'result',
		'resultExpression',
		'satisfiedRequirement',
		'satisfiedViewpoint',
		'satisfyingFeature',
		'senderArgument',
		'seqArgument',
		'source',
		'sourceFeature',
		'sourceOutputFeature',
		'sourceType',
		'specific',
		'stakeholderParameter',
		'state',
		'stateDefinition',
		'step',
		'subclassifier',
		'subjectParameter',
		'subsettedFeature',
		'subsettingFeature',
		'succession',
		'superclassifier',
		'supplier',
		'taggedCommit',
		'target',
		'targetArgument',
		'targetFeature',
		'targetInputFeature',
		'targetType',
		'terminatedOccurrenceArgument',
		'textualRepresentation',
		'thenAction',
		'transitionFeature',
		'triggerAction',
		'type',
		'typeDifferenced',
		'typeDisjoined',
		'typeIntersected',
		'typeUnioned',
		'typedFeature',
		'unioningType',
		'untilArgument',
		'upperBound',
		'usage',
		'useCaseDefinition',
		'useCaseIncluded',
		'usedCommit',
		'usedProject',
		'valueExpression',
		'variant',
		'variantMembership',
		'verificationCaseDefinition',
		'verifiedRequirement',
		'view',
		'viewCondition',
		'viewDefinition',
		'viewRendering',
		'viewpointDefinition',
		'viewpointStakeholder',
		'whileArgument',
		'value',
		'analysisAction')),
	"origin_id" TEXT NOT NULL,
	"target_id" TEXT NOT NULL,
	FOREIGN KEY("origin_id") REFERENCES "elements"("@id") DEFERRABLE INITIALLY DEFERRED,
	FOREIGN KEY("target_id") REFERENCES "elements"("@id") DEFERRABLE INITIALLY DEFERRED,
	PRIMARY KEY("name","origin_id","target_id")
) STRICT;


CREATE TABLE "extended_properties" (
	"@id" TEXT NOT NULL,
	"alias" TEXT,
	"aliasIds" TEXT,
	"select" TEXT,
	"text" TEXT,
	FOREIGN KEY("@id") REFERENCES "elements"("@id") DEFERRABLE INITIALLY DEFERRED
) STRICT;


DROP INDEX IF EXISTS "elements.@type";
CREATE INDEX "elements.@type" ON "elements"("@type");

DROP INDEX IF EXISTS "elements.declaredName";
CREATE INDEX "elements.declaredName" ON "elements"("declaredName");

DROP INDEX IF EXISTS "elements.declaredShortName";
CREATE INDEX "elements.declaredShortName" ON "elements"("declaredShortName");

DROP INDEX IF EXISTS "elements.isLibraryElement";
CREATE INDEX "elements.isLibraryElement" ON "elements"("isLibraryElement");

DROP INDEX IF EXISTS "elements.name";
CREATE INDEX "elements.name" ON "elements"("name");

DROP INDEX IF EXISTS "elements.qualifiedName";
CREATE INDEX "elements.qualifiedName" ON "elements"("qualifiedName");

DROP INDEX IF EXISTS "elements.value";
CREATE INDEX "elements.value" ON "elements"("value");

DROP INDEX IF EXISTS "relations.origin_id";
CREATE INDEX "relations.origin_id" ON "relations"("origin_id");

DROP INDEX IF EXISTS "relations.target_id";
CREATE INDEX "relations.target_id" ON "relations"("target_id");

